function out=conservative_1d(x,dx,n,gamma,a,nt,th,c)
  
 % calculating initial profiles
for i=1:n
    % inputs
    if (x(i)>=0 && x(i)<=0.5)
        rho(i)=1;
        t(i)=1;
    end
    if (x(i)>=0.5 && x(i)<=1.5)
        rho(i)=1-0.366*(x(i)-0.5);
        t(i)=1-0.167*(x(i)-0.5);
    end
    
    if (x(i)>=1.5 && x(i)<=3.5)
        rho(i)=0.634-0.3879*(x(i)-1.5);
        t(i)=0.833-0.3507*(x(i)-1.5);
    end
end
 
v=0.59./(rho.*a);
p=rho.*t;
c=0.5;
for z=1:n
    dt(z)=(c*dx)/(t(z)^0.5+v(z));
end
dt=min(dt);

    U1= rho.*a;
    U2=rho.*a.*v;
    U3=rho.*((t./(gamma-1))+(0.5*gamma.*v.^2)).*a;
    
    
   
% outer time loop

for k=1:nt
   
    rho_old=rho;
    v_old=v;
    t_old=t;
    p_old=p;
    U1_old=U1;
    U2_old=U2;
    U3_old=U3;
   
    F1=U2;
    F2=((U2.^2)./U1)+((gamma-1)./gamma).*(U3-(0.5*gamma.*U2.^2.*(U1.^-1)));
    F3=(gamma.*U2.*U3.*(U1.^-1))-(0.5*gamma*(gamma-1).*U2.^3.*(U1.^-2));
    
    
    for i=2:n-1
        
        J2(i)=(1/gamma).*rho(i).*t(i).*((a(i+1)-a(i))/dx);
        
        %predictor step
        
        dU1_dt_p(i)=-(F1(i+1)-F1(i))/dx;
        
        dU2_dt_p(i)=((-(F2(i+1)-F2(i))/(dx))+J2(i));
        
        dU3_dt_p(i)=-((F3(i+1)-F3(i))/dx);
        
        % updating values
        
        U1(i)=U1(i)+(dU1_dt_p(i))*dt;
        
        U2(i)=U2(i)+(dU2_dt_p(i))*dt;
        
        U3(i)=U3(i)+(dU3_dt_p(i))*dt;    
    rho(i)=U1(i)./a(i);
    v(i)=U2(i)./U1(i);
    t(i)=(gamma-1)*((U3(i)./U1(i))-((gamma/2)*(v(i).^2)));
    
    
    
    F1(i)=U2(i);
    F2(i) = (U2(i).^2./U1(i)) + ((gamma-1)/gamma)*(U3(i) - (gamma*U2(i).^2)./(2*U1(i)));
    F3(i) = (gamma*U2(i).*U3(i)./U1(i)) - (gamma*(gamma-1)/2)*(U2(i).^3./U1(i).^2);
    
    
    end
  
    
    
 for i=2:n-1        
   
        J2(i)=(1/gamma).*rho(i).*t(i).*((a(i)-a(i-1))/dx);
        
        %corrector step
        
        dU1_dt_c(i)=-(F1(i)-F1(i-1))/dx;
        
        dU2_dt_c(i)=((-(F2(i)-F2(i-1))/(dx))+J2(i));
        
        dU3_dt_c(i)=-((F3(i)-F3(i-1))/dx);
        
        
        
 end
   
 
 % average values
 
        dU1_dt=0.5*(dU1_dt_p+dU1_dt_c);
        
        dU2_dt=0.5*(dU2_dt_p+dU2_dt_c);
        
        dU3_dt=0.5*(dU3_dt_p+dU3_dt_c);   
        
        
        for i=2:n-1
            U1(i)=dU1_dt(i).*dt+U1_old(i);
            U2(i)=dU2_dt(i).*dt+U2_old(i);
            U3(i)=dU3_dt(i).*dt+U3_old(i);
        end
   % applying boundary conditions
   
   U2(1)= 2*U2(2)-U2(3);
   
   U1(n)=2*U1(n-1)-U1(n-2);
   U2(n)=2*U2(n-1)-U2(n-2);
   U3(n)=2*U3(n-1)-U3(n-2);
        
    % updation of values 
    rho=U1_old./a;
    v=U2_old./U1_old;
    t=(gamma-1)*((U3_old./U1_old)-(gamma/2)*v_old.^2);
    p=rho_old.*t_old;
    Mach_no= v_old./sqrt(t);
    mass_flow_rate=rho_old.*a.*v_old;
    
     % calculating values at throat
     p_th(k)=p(th);
     Mach_no_th(k)=Mach_no(th);
     rho_th(k)=rho(th);
     mass_flow_rate_th(k)=mass_flow_rate(th);  
    
  end
   
  
    figure(1)
    subplot(4,1,1)

    plot(x,rho,\'b\',\'linewidth\',2)
     grid on
 subplot(4,1,2)
    plot(x,v,\'r\',\'linewidth\',2)
      grid on
 subplot(4,1,3)
   plot(x,rho,\'g\',\'linewidth\',2)
     grid on
 subplot(4,1,4)
 plot(x,t,\'y\',\'linewidth\',2)
   grid on
   
  
  
   figure(2)
   grid on
     subplot(4,1,1)
     plot(Mach_no_th,\'color\',\'c\')
     xlabel(\'Mach Number\')
     ylabel(\'no. of time steps\')
      grid on
     subplot(4,1,2)
    plot(p_th,\'color\',\'r\')
    xlabel(\'non-dimensional pressure\')
    ylabel(\'no. of time steps\')
    
    
    grid on
    
    subplot(4,1,3)
    plot(rho_th,\'color\',\'b\')
    grid on
    
    subplot(4,1,4)
    plot(mass_flow_rate_th,\'color\',\'y\')
    grid on
    
    
    pause(0.0003)
  
         
end
